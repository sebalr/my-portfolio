{"version":3,"sources":["components/Layout/Dashboard/Investments/Investment/ProfitLabel/ProfitLabel.module.css","components/Layout/Dashboard/Summary/Summary.module.css","components/Layout/Dashboard/Investments/Investment/Investment.module.css","common/state.interfaces.ts","database/database.ts","helpers/investment.ts","context/DashboardContext.tsx","context/ModalContext.tsx","components/Layout/Toolbar/Menu/ToolbarMenu.tsx","components/Layout/Toolbar/MyToolbar.tsx","helpers/dashboard.ts","components/Layout/Dashboard/Summary/Summary.tsx","components/Layout/Dashboard/Investments/Investment/ProfitLabel/ProfitLabel.tsx","components/Layout/Dashboard/Investments/Investment/Investment.tsx","components/UI/DatePicker/DatePicker.tsx","components/Layout/Dashboard/Investments/FilterInvestments/FillterInvestments.tsx","components/Layout/Dashboard/Investments/Investments.tsx","components/Layout/Dashboard/Welcome/Welcome.tsx","components/UI/AdornmentInput/AdornmentInput.tsx","components/Dialogs/UpdateInvestmentDialog.tsx","components/Dialogs/AddInvestmentDialog.tsx","components/Dialogs/NewOperationDialog.tsx","components/UI/FileUpload/FileUpload.tsx","components/Dialogs/ImportDbDialog.tsx","components/Layout/Dashboard/Dashboard.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","components/Layout/Layout.module.css"],"names":["module","exports","InvestmentOperation","InvestmentsDatabase","databaseName","investments","operations","version","stores","table","Dexie","defaultFilter","fromDate","Date","setMonth","getMonth","from","to","calculateProfit","length","value1","value2","investment","profits","index","currentValue","amountAfter","nextValue","operation","update","new","amount","amountBefore","push","reduce","current","acc","DashboardContext","createContext","selectedInvestment","operationFilters","DashboardProvider","props","children","useState","db","state","setState","newInvestmentOperation","a","transaction","investmentId","date","add","prevState","investmentIndex","findIndex","x","id","updatedInvestments","concat","addInvestment","asset","updatedInvestment","updateInvestment","removeInvestment","delete","newArray","filter","item","newOperations","updateInvestmentsAndOperations","exportDb","exportDB","blob","name","toISOString","slice","download","loadDataFromDb","toArray","filters","removeDb","newDb","importDb","importDB","where","between","investmentProfit","equals","array","filterOperations","filtered","Provider","value","selectInvestment","selectInvestmentOperation","closedDialogs","newDialogOn","updateDialogOn","newOperationOn","loadDbDialogOn","ModalContext","dialogsState","ModalContextProvider","setstate","openNewDialog","openUpdaeDialog","openNewOperationDialog","openLoadDbDialog","closeOpenDialogs","ToolbarMenu","anchorEl","setAnchorEl","useContext","handleClose","IconButton","color","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","MyToolbar","AppBar","Toolbar","className","parseDashboardData","backgroundColor","scale","chroma","random","domain","Array","fill","undefined","map","_","toString","getColors","labels","data","forEach","abbreviation","datasets","label","borderWidth","Summary","openAddDialog","graphData","chart","Card","variant","CardContent","Button","styles","graphContainer","memo","ProfitLabel","profit","setProfit","useEffect","assetOperations","loadProfit","green","red","toFixed","Investment","newOperation","row","toLocaleString","decrease","size","increase","DatePicker","fullWidth","change","inputVariant","autoOk","disableToolbar","format","margin","onChange","KeyboardButtonProps","FillterInvestments","newDate","Investments","openUpdateDialogHandler","openOperationDialogHandler","investmentsList","Welcome","AdornmentInput","type","adornment","handleChange","FormControl","InputLabel","htmlFor","FilledInput","startAdornment","InputAdornment","position","UpdateInvestmentDialog","emptyModal","close","closeHandler","assetName","Dialog","aria-labelledby","onSubmit","preventDefault","DialogTitle","DialogContent","DialogContentText","$event","target","valueAsNumber","DialogActions","AddInvestmentDialog","TextField","NewOperationDialog","syncValues","newState","auxState","Number","isNaN","operationLabel","minimumFractionDigits","maximumFractionDigits","FileUpload","select","accept","hidden","files","component","ImportDbDialog","file","setfile","selectedFile","Dashboard","openNewDialogHandler","closeDialogHandler","dashboard","dialogs","Layout","layout","utils","DateFnsUtils","main","Container","scrollContainer","maxWidth","App","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac20fb75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"ProfitLabel_red__13FZp\",\"green\":\"ProfitLabel_green__1cJqv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphContainer\":\"Summary_graphContainer__2VEZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Investment_row__20Q6y\"};","/* eslint-disable no-unused-vars */\n\nexport enum InvestmentOperation {\n  new = 1,\n  increase,\n  decrease,\n  update\n}\n\nexport interface IDialogsState {\n  updateDialogOn: boolean;\n  newOperationOn: boolean;\n  newDialogOn: boolean;\n  loadDbDialogOn: boolean;\n}\n\nexport interface IModalProviderState {\n  dialogsState: IDialogsState\n}\n\nexport interface IModalContext {\n  dialogsState: IDialogsState;\n  openNewDialog?: () => void;\n  openUpdaeDialog?: () => void;\n  openNewOperationDialog?: () => void;\n  openLoadDbDialog?: () => void;\n  closeOpenDialogs?: () => void;\n}\n\nexport interface IDashboardContextState {\n  investments: Array<IInvestment>;\n  selectedInvestment: IInvestment | null;\n  operations: Array<IInvestmentOperation>;\n}\n\nexport interface IDashboardContext {\n  investments: Array<IInvestment>;\n  selectedInvestment: IInvestment | null;\n  operations: Array<IInvestmentOperation>;\n  operation: InvestmentOperation;\n  operationFilters: IFilterOperations | null;\n  addInvestment?: (investment: IInvestment) => void;\n  removeInvestment?: (id: number) => void;\n  updateInvestment?: (investment: IInvestment, amount: number, date: Date) => void;\n  newInvestmentOperation?: (operation: IInvestmentOperation) => void;\n  loadDataFromDb?: () => Promise<void>;\n  exportDb?: () => Promise<void>;\n  importDb?: (blob: Blob) => Promise<void>;\n  removeDb?: () => Promise<void>;\n  investmentProfit?: (investmentId: number) => Promise<number | undefined>;\n  selectInvestment?: (investment: IInvestment) => void;\n  selectInvestmentOperation?: (selectedInvestment: IInvestment, operation: InvestmentOperation) => void;\n  filterOperations?: (filters: IFilterOperations) => Promise<void>;\n}\n\nexport interface IInvestment {\n  id?: number,\n  asset: IAsset;\n  amount: number;\n  date: Date;\n}\n\nexport interface IInvestmentOperation {\n  investmentId: number;\n  asset: IAsset;\n  date: Date;\n  amount: number;\n  amountBefore: number;\n  amountAfter: number;\n  operation: InvestmentOperation;\n}\n\nexport interface IAsset {\n  name: string;\n  abbreviation?: string;\n}\n\nexport interface IFilterOperations {\n  from: Date;\n  to: Date;\n}\n","import Dexie from 'dexie';\nimport { IInvestment, IInvestmentOperation } from 'common/state.interfaces';\n\nexport default class InvestmentsDatabase extends Dexie {\n\n  investments: Dexie.Table<IInvestment, number>;\n\n  operations: Dexie.Table<IInvestmentOperation, number>;\n\n  constructor(databaseName: string) {\n    super(databaseName);\n    this.version(1).stores(\n      {\n        investments: '++id,date',\n        operations: '++id,date,operation,investmentId',\n      },\n    );\n    this.investments = this.table('investments');\n    this.operations = this.table('operations');\n  }\n\n}\n","import { IFilterOperations, IInvestmentOperation, InvestmentOperation } from 'common/state.interfaces';\n\nconst getNexValueForProfit = (investment: IInvestmentOperation) => {\n  if (investment.operation === InvestmentOperation.update || investment.operation === InvestmentOperation.new) {\n    return investment.amount;\n  }\n  return investment.amountBefore;\n};\n\nconst percentCalculator = (value1: number, value2: number): number => {\n  if (value1 === 0) {\n    return value2 > 0 ? 1 : -1;\n  }\n  return (value2 - value1) / value1;\n};\n\nconst calculateProfit = (investments: IInvestmentOperation[]): number | undefined => {\n  if (investments.length <= 1) {\n    return undefined;\n  }\n\n  const profits: number[] = [];\n  for (let index = 0; index < investments.length - 1; index++) {\n    const currentValue = investments[index].amountAfter;\n    const nextValue = getNexValueForProfit(investments[index + 1]);\n    profits.push(percentCalculator(currentValue, nextValue));\n  }\n  const totalProfit = profits.reduce((current, acc) => current + acc, 0);\n  return totalProfit / profits.length;\n};\n\nexport const defaultFilter = () => {\n  const fromDate = new Date();\n  fromDate.setMonth(fromDate.getMonth() - 1);\n  const toDate = new Date();\n  const filters: IFilterOperations = {\n    from: fromDate,\n    to: toDate,\n  };\n\n  return filters;\n};\n\nexport default calculateProfit;\n","import {\n  IDashboardContext,\n  IFilterOperations,\n  IInvestment,\n  IInvestmentOperation,\n  InvestmentOperation,\n} from 'common/state.interfaces';\nimport { createContext, useState } from 'react';\nimport InvestmentsDatabase from 'database/database';\nimport { importDB, exportDB } from 'dexie-export-import';\nimport download from 'downloadjs';\nimport calculateProfit, { defaultFilter } from 'helpers/investment';\n\ninterface IDashboardProviderState {\n  db: InvestmentsDatabase;\n  investments: Array<IInvestment>;\n  selectedInvestment: IInvestment | null;\n  operations: Array<IInvestmentOperation>;\n  operation: InvestmentOperation;\n  operationFilters: IFilterOperations | null;\n}\n\nexport const DashboardContext = createContext<IDashboardContext>(\n  {\n    operations: [],\n    investments: [],\n    selectedInvestment: null,\n    operation: InvestmentOperation.new,\n    operationFilters: null,\n  },\n);\n\nconst DashboardProvider = (props: any) => {\n  const { children } = props;\n  const [state, setState] = useState<IDashboardProviderState>(\n    {\n      db: new InvestmentsDatabase('investmentsDb'),\n      investments: [],\n      selectedInvestment: null,\n      operations: [],\n      operationFilters: null,\n      operation: InvestmentOperation.new,\n    },\n  );\n\n  // Update an existing investment with indicated operation\n  const newInvestmentOperation = async (operation: IInvestmentOperation) => {\n    await state.db.transaction('rw', state.db.investments, state.db.operations, async () => {\n      await state.db.investments.update(\n        operation.investmentId,\n        {\n          amount: operation.amountAfter,\n          date: operation.date,\n        },\n      );\n\n      await state.db.operations.add(operation);\n      setState(prevState => {\n        const investmentIndex = prevState.investments.findIndex(x => x.id === operation.investmentId);\n        const updatedInvestments = [...prevState.investments];\n        updatedInvestments[investmentIndex].amount = operation.amountAfter;\n        updatedInvestments[investmentIndex].date = operation.date;\n        return (\n          {\n            ...prevState,\n            investments: updatedInvestments,\n            operations: prevState.operations.concat(operation),\n          });\n      });\n    });\n  };\n\n  // investment operations\n  const addInvestment = async (investment: IInvestment) => {\n    await state.db.transaction('rw', state.db.investments, state.db.operations, async () => {\n      const id = await state.db.investments.add(investment);\n      const operation = {\n        investmentId: id,\n        asset: investment.asset,\n        date: investment.date,\n        amount: investment.amount,\n        amountAfter: investment.amount,\n        amountBefore: 0,\n        operation: InvestmentOperation.new,\n      };\n      await state.db.operations.add(operation);\n      const updatedInvestment = { ...investment, id };\n      setState(prevState => (\n        {\n          ...prevState,\n          investments: [...prevState.investments, updatedInvestment],\n          operations: prevState.operations.concat(operation),\n        }));\n    });\n  };\n\n  const updateInvestment = async (investment: IInvestment, amount: number, date: Date) => {\n    const operation: IInvestmentOperation = {\n      investmentId: investment.id!,\n      asset: investment.asset,\n      date,\n      amount,\n      amountBefore: investment.amount,\n      amountAfter: amount,\n      operation: InvestmentOperation.update,\n    };\n\n    newInvestmentOperation(operation);\n  };\n\n  const removeInvestment = async (id: number) => {\n    await state.db.investments.delete(id);\n    setState(prevState => {\n      const newArray = prevState.investments.filter(item => item.id !== id);\n      const newOperations = prevState.operations.filter(item => item.investmentId !== id);\n      return ({ ...prevState, investments: newArray, operations: newOperations });\n    });\n  };\n\n  const updateInvestmentsAndOperations = (\n    investments: IInvestment[], operations: IInvestmentOperation[], filter: IFilterOperations | null,\n  ) => {\n    setState(prevState => ({ ...prevState, investments, operations, operationFilters: filter }));\n  };\n\n  const exportDb = async () => {\n    const blob = await exportDB(state.db);\n    const name = `portfolio-export-${new Date().toISOString().slice(0, 10)}.json`;\n    download(blob, name, 'application/json');\n  };\n\n  const loadDataFromDb = async () => {\n    const investments = await state.db.investments.toArray();\n    const filters = defaultFilter();\n    const operations = await state.db.operations.toArray();\n    updateInvestmentsAndOperations(investments, operations, filters);\n  };\n\n  const removeDb = async () => {\n    await state.db.delete();\n    const newDb = new InvestmentsDatabase('investmentsDb');\n    setState(prevState => ({ ...prevState, db: newDb, investments: [], operations: [], operationFilters: null }));\n  };\n\n  const importDb = async (blob: Blob) => {\n    await removeDb();\n    const newDb = await importDB(blob) as InvestmentsDatabase;\n    const investments = await newDb.investments.toArray();\n    const operationFilters = defaultFilter();\n    const operations = await state.db.operations.where('date')\n      .between(operationFilters.from, operationFilters.to).toArray();\n    setState(prevState => ({ ...prevState, db: newDb, investments, operations, operationFilters }));\n  };\n\n  const investmentProfit = async (investmentId: number): Promise<number | undefined> => {\n    const operations = state.db.operations.where('investmentId').equals(investmentId);\n    const array = await operations.toArray();\n    return calculateProfit(array);\n  };\n\n  const selectInvestment = (investment: IInvestment) => {\n    setState(prevState => ({ ...prevState, selectedInvestment: investment }));\n  };\n\n  const selectInvestmentOperation = (selectedInvestment: IInvestment, operation: InvestmentOperation) => {\n    setState(prevState => ({ ...prevState, selectedInvestment, operation }));\n  };\n\n  const filterOperations = async (filters: IFilterOperations) => {\n    const filtered = await state.db.operations.where('date').between(filters.from, filters.to).toArray();\n    setState(prevState => ({ ...prevState, operationFilters: filters, operations: filtered }));\n  };\n\n  return (\n    <DashboardContext.Provider\n      value={\n        {\n          ...state,\n          addInvestment,\n          removeInvestment,\n          updateInvestment,\n          newInvestmentOperation,\n          loadDataFromDb,\n          exportDb,\n          importDb,\n          removeDb,\n          investmentProfit,\n          selectInvestment,\n          selectInvestmentOperation,\n          filterOperations,\n        }\n      }\n    >\n      {children}\n    </DashboardContext.Provider>\n  );\n};\n\nexport default DashboardProvider;\n","import {\n  IModalContext,\n  IModalProviderState,\n} from 'common/state.interfaces';\nimport { createContext, useState } from 'react';\n\nconst closedDialogs = {\n  newDialogOn: false,\n  updateDialogOn: false,\n  newOperationOn: false,\n  loadDbDialogOn: false,\n};\n\nexport const ModalContext = createContext<IModalContext>({ dialogsState: closedDialogs });\n\nconst ModalContextProvider = (props: any) => {\n  const { children } = props;\n  const [state, setstate] = useState<IModalProviderState>({ dialogsState: closedDialogs });\n\n  const openNewDialog = () => {\n    const dialogsState = { ...closedDialogs, newDialogOn: true };\n    setstate({ ...state, dialogsState });\n  };\n  const openUpdaeDialog = () => {\n    const dialogsState = { ...closedDialogs, updateDialogOn: true };\n    setstate({ ...state, dialogsState });\n  };\n  const openNewOperationDialog = () => {\n    const dialogsState = { ...closedDialogs, newOperationOn: true };\n    setstate({ ...state, dialogsState });\n  };\n  const openLoadDbDialog = () => {\n    const dialogsState = { ...closedDialogs, loadDbDialogOn: true };\n    setstate({ ...state, dialogsState });\n  };\n  const closeOpenDialogs = () => {\n    setstate({ ...state, dialogsState: closedDialogs });\n  };\n\n  return (\n    <ModalContext.Provider\n      value={{\n        dialogsState: state.dialogsState,\n        openNewDialog,\n        openUpdaeDialog,\n        openNewOperationDialog,\n        openLoadDbDialog,\n        closeOpenDialogs,\n      }}\n    >\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\nexport default ModalContextProvider;\n","import { useState, MouseEvent, useContext } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { DashboardContext } from 'context/DashboardContext';\nimport { ModalContext } from 'context/ModalContext';\n\nconst ToolbarMenu = () => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const { exportDb, removeDb } = useContext(DashboardContext);\n  const { openLoadDbDialog } = useContext(ModalContext);\n\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const downloadDbHandler = () => {\n    exportDb!();\n    handleClose();\n  };\n\n  const loadDbHandler = () => {\n    openLoadDbDialog!();\n    handleClose();\n  };\n\n  const clearDbHandler = () => {\n    removeDb!();\n    handleClose();\n  };\n\n  return (\n    <div>\n      <IconButton\n        color=\"inherit\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={downloadDbHandler}>Save databse</MenuItem>\n        <MenuItem onClick={loadDbHandler}>Import database</MenuItem>\n        <MenuItem onClick={clearDbHandler}>Clear database</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default ToolbarMenu;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport ToolbarMenu from 'components/Layout/Toolbar/Menu/ToolbarMenu';\n\nconst MyToolbar = () => (\n  <>\n    <AppBar>\n      <Toolbar>\n        <div className=\"flex-row\">\n          <h3>My portfolio</h3>\n          <ToolbarMenu />\n        </div>\n      </Toolbar>\n    </AppBar>\n  </>\n);\n\nexport default MyToolbar;\n","import { IPieChartData } from 'common/graph.interfaces';\nimport { IInvestment } from 'common/state.interfaces';\nimport chroma from 'chroma-js';\n\nconst getColors = (length: number) => {\n  const scale = chroma.scale([chroma.random(), chroma.random()]).domain([0, length]);\n  return new Array(length).fill(undefined).map((_, index) => scale(index).toString());\n};\n\nconst parseDashboardData = (investments: Array<IInvestment>): IPieChartData | null => {\n  if (investments.length <= 0) {\n    return null;\n  }\n  const backgroundColor = getColors(investments.length);\n  const labels: string[] = [];\n  const data: number[] = [];\n  investments.forEach(x => {\n    labels.push(x.asset.abbreviation || x.asset.name);\n    data.push(x.amount);\n  });\n  return {\n    labels,\n    datasets: [{\n      label: 'Total investment',\n      data,\n      backgroundColor,\n      borderWidth: 1,\n    }],\n  } as IPieChartData;\n};\n\nexport default parseDashboardData;\n","import { memo } from 'react';\nimport parseDashboardData from 'helpers/dashboard';\nimport { IInvestment } from 'common/state.interfaces';\nimport { Pie } from 'react-chartjs-2';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\n\nimport styles from './Summary.module.css';\n\ninterface ISummaryProps {\n  investments: IInvestment[],\n  openAddDialog: () => void,\n}\n\nconst Summary = (props: ISummaryProps) => {\n  const { investments, openAddDialog } = props;\n  const graphData = parseDashboardData(investments);\n  let chart = null;\n\n  if (investments.length > 0) {\n    chart = (\n      <Pie\n        data={graphData}\n      />\n    );\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <div className=\"flex-row\">\n          <h3>Portfolio</h3>\n          <Button\n            onClick={openAddDialog}\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            Add\n          </Button>\n        </div>\n        <div className={styles.graphContainer}>\n          {chart}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default memo(Summary);\n","import { DashboardContext } from 'context/DashboardContext';\nimport { useContext, useEffect, useState } from 'react';\nimport calculateProfit from 'helpers/investment';\n\nimport styles from './ProfitLabel.module.css';\n\ninterface IProfitLabelProps {\n  investmentId: number;\n}\n\nconst ProfitLabel = (props: IProfitLabelProps) => {\n  const { investmentId } = props;\n  const [profit, setProfit] = useState<number>();\n  const { operations } = useContext(DashboardContext);\n\n  useEffect(() => {\n    const loadProfit = async () => {\n      const assetOperations = operations.filter(x => x.investmentId === investmentId);\n      const value = calculateProfit(assetOperations);\n      setProfit(value);\n    };\n    loadProfit();\n  }, [operations]);\n\n  const color = profit && profit >= 0 ? styles.green : styles.red;\n  return (\n    <span className={color}>\n      {profit ? `${(profit * 100).toFixed(2)} %` : '-'}\n    </span>\n  );\n};\n\nexport default ProfitLabel;\n","import { memo, useContext } from 'react';\nimport { IInvestment, InvestmentOperation } from 'common/state.interfaces';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { DashboardContext } from 'context/DashboardContext';\nimport ProfitLabel from 'components/Layout/Dashboard/Investments/Investment/ProfitLabel/ProfitLabel';\n\nimport styles from './Investment.module.css';\n\ninterface IInvestmentProps {\n  investment: IInvestment;\n  /* eslint-disable-next-line */\n  update: (item: IInvestment) => void;\n  /* eslint-disable-next-line */\n  newOperation: (item: IInvestment, operation: InvestmentOperation) => void;\n}\n\nconst Investment = (props: IInvestmentProps) => {\n  const { investment, update, newOperation } = props;\n  const { removeInvestment } = useContext(DashboardContext);\n\n  const removeInvestmentHandler = () => {\n    removeInvestment!(investment.id!);\n  };\n\n  const openUpdateInvestmentHandler = () => {\n    update(investment);\n  };\n\n  const openIncreaseOperationHandler = () => {\n    newOperation(investment, InvestmentOperation.increase);\n  };\n\n  const openDecreaseOperationHandler = () => {\n    newOperation(investment, InvestmentOperation.decrease);\n  };\n\n  return (\n    <div className={styles.row}>\n      <IconButton\n        color=\"secondary\"\n        onClick={removeInvestmentHandler}\n      >\n        <DeleteIcon />\n      </IconButton>\n      <span>{investment.asset.name}</span>\n      <strong>\n        $\n        {investment.amount.toLocaleString()}\n      </strong>\n      <ProfitLabel investmentId={investment.id!} />\n      <div className=\"flex-row no-wrap\">\n        <Button\n          onClick={openDecreaseOperationHandler}\n          color=\"secondary\"\n          size=\"small\"\n        >\n          Decrease\n        </Button>\n        <Button\n          onClick={openIncreaseOperationHandler}\n          color=\"primary\"\n          size=\"small\"\n        >\n          Increase\n        </Button>\n        <Button\n          color=\"primary\"\n          size=\"small\"\n          onClick={openUpdateInvestmentHandler}\n        >\n          Update\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Investment);\n","import { KeyboardDatePicker } from '@material-ui/pickers';\n\ninterface IDatePickerProps {\n  inputVariant?: 'filled' | 'standard' | 'outlined';\n  size?: 'small' | 'medium';\n  label: string;\n  fullWidth?: boolean;\n  value: Date | null;\n  /* eslint-disable-next-line */\n  change: (date: Date | null, changeValue?: string | null | undefined) => void;\n}\n\nconst DatePicker = (props: IDatePickerProps) => {\n  const { fullWidth, label, value, change, inputVariant = 'filled', size } = props;\n  return (\n    <KeyboardDatePicker\n      size={size}\n      fullWidth={fullWidth}\n      autoOk\n      disableToolbar\n      inputVariant={inputVariant}\n      variant=\"inline\"\n      format=\"dd/MM/yyyy\"\n      margin=\"normal\"\n      label={label}\n      value={value}\n      onChange={change}\n      KeyboardButtonProps={{ 'aria-label': 'change date' }}\n    />\n  );\n};\n\nexport default DatePicker;\n","import { useContext, useEffect, useState } from 'react';\nimport DatePicker from 'components/UI/DatePicker/DatePicker';\nimport { DashboardContext } from 'context/DashboardContext';\n\ninterface IFilterState {\n  from: Date;\n  to: Date;\n}\n\nconst FillterInvestments = () => {\n  const { filterOperations, operationFilters } = useContext(DashboardContext);\n\n  const refreshOperations = () => {\n    filterOperations!({ from: operationFilters!.from, to: operationFilters!.to });\n  };\n\n  useEffect(() => {\n    const to = new Date();\n    const from = new Date();\n    from.setMonth(from.getMonth() - 1);\n\n    filterOperations!({ ...operationFilters!, from, to });\n  }, []);\n\n  const toDateChangeHandler = (newDate: Date | null) => {\n    if (newDate) {\n      filterOperations!({ ...operationFilters!, to: newDate });\n    }\n  };\n  const fromDateChangeHandler = (newDate: Date | null) => {\n    if (newDate) {\n      filterOperations!({ ...operationFilters!, from: newDate });\n    }\n  };\n\n  return (\n    <div className=\"form-row\">\n      <DatePicker\n        size=\"small\"\n        inputVariant=\"outlined\"\n        label=\"From\"\n        value={operationFilters!.from}\n        change={fromDateChangeHandler}\n      />\n      <DatePicker\n        size=\"small\"\n        inputVariant=\"outlined\"\n        label=\"To\"\n        value={operationFilters!.to}\n        change={toDateChangeHandler}\n      />\n    </div>\n  );\n};\n\nexport default FillterInvestments;\n","import { useContext } from 'react';\nimport { IInvestment, InvestmentOperation } from 'common/state.interfaces';\nimport { DashboardContext } from 'context/DashboardContext';\nimport { ModalContext } from 'context/ModalContext';\nimport Investment from 'components/Layout/Dashboard/Investments/Investment/Investment';\nimport FillterInvestments from 'components/Layout/Dashboard/Investments/FilterInvestments/FillterInvestments';\n\ninterface IInvestmentsProps {\n  investments: IInvestment[]\n}\n\nconst Investments = (props: IInvestmentsProps) => {\n  const { selectInvestment, selectInvestmentOperation } = useContext(DashboardContext);\n  const { openUpdaeDialog, openNewOperationDialog } = useContext(ModalContext);\n\n  const openUpdateDialogHandler = (investment: IInvestment) => {\n    selectInvestment!(investment);\n    openUpdaeDialog!();\n  };\n\n  const openOperationDialogHandler = (investment: IInvestment, operation: InvestmentOperation) => {\n    selectInvestmentOperation!(investment, operation);\n    openNewOperationDialog!();\n  };\n\n  const { investments } = props;\n  const investmentsList = investments.map(item => (\n    <Investment\n      key={item.id}\n      investment={item}\n      update={openUpdateDialogHandler}\n      newOperation={openOperationDialogHandler}\n    />\n  ));\n  return (\n    <>\n      <FillterInvestments />\n      { investmentsList}\n    </>\n  );\n};\n\nexport default Investments;\n","import Button from '@material-ui/core/Button';\n\ninterface IWelcomeProps {\n  openAddDialog: () => void,\n}\n\nconst Welcome = (props: IWelcomeProps) => {\n  const { openAddDialog } = props;\n\n  return (\n    <>\n      <div className=\"flex-row\">\n        Please add and investment\n        <Button\n          onClick={openAddDialog}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Add\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Welcome;\n","import { ChangeEvent, ReactNode } from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\n\ninterface IAdornmentInputProps {\n  label: string;\n  type: string;\n  value: string | number | undefined;\n  adornment: string | ReactNode;\n  fullWidth: boolean | undefined;\n  /* eslint-disable-next-line */\n  change: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst AdornmentInput = (props: IAdornmentInputProps) => {\n  const { type, label, value, adornment, change: handleChange, fullWidth } = props;\n  return (\n    <FormControl\n      margin=\"normal\"\n      variant=\"filled\"\n      fullWidth={fullWidth}\n    >\n      <InputLabel htmlFor=\"asset-amount\">{label}</InputLabel>\n      <FilledInput\n        type={type}\n        id=\"asset-amount\"\n        value={value}\n        onChange={handleChange}\n        startAdornment={<InputAdornment position=\"start\">{adornment}</InputAdornment>}\n      />\n    </FormControl>\n  );\n};\n\nexport default AdornmentInput;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AdornmentInput from 'components/UI/AdornmentInput/AdornmentInput';\nimport DatePicker from 'components/UI/DatePicker/DatePicker';\nimport { FormEvent, ChangeEvent, useState, useContext } from 'react';\nimport { DashboardContext } from 'context/DashboardContext';\nimport { IInvestment } from 'common/state.interfaces';\n\ninterface IUpdateDialogProps {\n  investment: IInvestment;\n  open: boolean;\n  close: () => void;\n}\n\ninterface IUpdateDialogState {\n  amount: number | '';\n  date: Date;\n}\n\nconst UpdateInvestmentDialog = (props: IUpdateDialogProps) => {\n  const emptyModal: IUpdateDialogState = {\n    amount: '',\n    date: new Date(),\n  };\n\n  const { updateInvestment } = useContext(DashboardContext);\n\n  const [state, setstate] = useState<IUpdateDialogState>(emptyModal);\n\n  const { open, close, investment } = props;\n  const { amount, date } = state;\n\n  const closeHandler = () => {\n    setstate(emptyModal);\n    close();\n  };\n\n  const amountChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate({ ...state, amount: $event.target.valueAsNumber });\n  };\n\n  const dateChangeHandler = (newDate: Date | null) => {\n    if (newDate) {\n      setstate({ ...state, date: newDate });\n    }\n  };\n\n  const updateInvestmentHandler = (event: FormEvent) => {\n    event.preventDefault();\n    updateInvestment!(investment, state.amount as number, state.date);\n    setstate(emptyModal);\n    close();\n  };\n\n  const assetName = investment?.asset.abbreviation\n    ? `${investment?.asset.name} (${investment?.asset.abbreviation})`\n    : investment?.asset.name;\n\n  return (\n    <Dialog open={open} onClose={closeHandler} aria-labelledby=\"form-dialog-title\">\n      <form onSubmit={updateInvestmentHandler}>\n        <DialogTitle>\n          Update\n          {assetName}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Current ammount:&nbsp;\n            {investment.amount}\n          </DialogContentText>\n          <DatePicker\n            fullWidth\n            label=\"Date\"\n            value={date}\n            change={dateChangeHandler}\n          />\n          <AdornmentInput\n            type=\"number\"\n            fullWidth\n            label=\"Amount\"\n            adornment=\"$\"\n            value={amount}\n            change={amountChangeHandler}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeHandler} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default UpdateInvestmentDialog;\n","import Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AdornmentInput from 'components/UI/AdornmentInput/AdornmentInput';\nimport DatePicker from 'components/UI/DatePicker/DatePicker';\nimport { FormEvent, ChangeEvent, useState, useContext } from 'react';\nimport { DashboardContext } from 'context/DashboardContext';\n\ninterface IDialogProps {\n  open: boolean;\n  close: () => void;\n}\n\ninterface IAddDialogState {\n  amount: number | '';\n  date: Date;\n  asset: any;\n  name: string;\n  abbreviation: string;\n}\n\nconst AddInvestmentDialog = (props: IDialogProps) => {\n  const emptyModal: IAddDialogState = {\n    amount: '',\n    date: new Date(),\n    asset: null,\n    name: '',\n    abbreviation: '',\n  };\n\n  const { addInvestment } = useContext(DashboardContext);\n\n  const [state, setstate] = useState<IAddDialogState>(emptyModal);\n\n  const { open, close } = props;\n  const { amount, date, asset, name, abbreviation } = state;\n\n  const closeHandler = () => {\n    setstate(emptyModal);\n    close();\n  };\n\n  const amountChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate({ ...state, amount: $event.target.valueAsNumber });\n  };\n\n  const dateChangeHandler = (newDate: Date | null) => {\n    if (newDate) {\n      setstate({ ...state, date: newDate });\n    }\n  };\n  const newAssetNameChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate({ ...state, name: $event.target.value });\n  };\n\n  const newAssetAbbreviationChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate({ ...state, abbreviation: $event.target.value });\n  };\n\n  const saveInvestmentHandler = (event: FormEvent) => {\n    event.preventDefault();\n    addInvestment!({\n      asset: {\n        name: state.name,\n        abbreviation: state.abbreviation,\n      },\n      amount: state.amount as number,\n      date: state.date,\n    });\n    setstate(emptyModal);\n    close();\n  };\n\n  return (\n    <Dialog open={open} onClose={closeHandler} aria-labelledby=\"form-dialog-title\">\n      <form onSubmit={saveInvestmentHandler}>\n        <DialogTitle>Add asset</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Add new asset\n          </DialogContentText>\n          <div className=\"flex-row form-row\">\n            <TextField\n              className=\"flex-grow\"\n              value={name}\n              label=\"Name\"\n              variant=\"filled\"\n              onChange={newAssetNameChangeHandler}\n            />\n            <TextField\n              className=\"flex-grow\"\n              value={abbreviation}\n              label=\"Abbreviation\"\n              variant=\"filled\"\n              onChange={newAssetAbbreviationChangeHandler}\n            />\n          </div>\n          <DatePicker\n            fullWidth\n            label=\"Date\"\n            value={date}\n            change={dateChangeHandler}\n          />\n          <AdornmentInput\n            type=\"number\"\n            fullWidth\n            label=\"Amount\"\n            adornment=\"$\"\n            value={amount}\n            change={amountChangeHandler}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeHandler} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddInvestmentDialog;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AdornmentInput from 'components/UI/AdornmentInput/AdornmentInput';\nimport DatePicker from 'components/UI/DatePicker/DatePicker';\nimport { FormEvent, ChangeEvent, useState, useContext } from 'react';\nimport { DashboardContext } from 'context/DashboardContext';\nimport { IInvestment, IInvestmentOperation, InvestmentOperation } from 'common/state.interfaces';\n\ninterface IOperationDialogProps {\n  investment: IInvestment;\n  open: boolean;\n  operation?: InvestmentOperation;\n  close: () => void;\n}\n\ninterface IOperationDialogState {\n  amount: number | '';\n  amountBefore: number | '';\n  amountAfter: number | '';\n  date: Date;\n}\n\nconst NewOperationDialog = (props: IOperationDialogProps) => {\n  const emptyModal: IOperationDialogState = {\n    amount: '',\n    amountBefore: '',\n    amountAfter: '',\n    date: new Date(),\n  };\n\n  const { newInvestmentOperation } = useContext(DashboardContext);\n\n  const [state, setstate] = useState<IOperationDialogState>(emptyModal);\n\n  const { investment, operation, open, close } = props;\n  const { amount, date, amountAfter, amountBefore } = state;\n\n  if (!operation) {\n    return null;\n  }\n\n  const closeHandler = () => {\n    setstate(emptyModal);\n    close();\n  };\n\n  const syncValues = (newState: IOperationDialogState): IOperationDialogState => {\n    const auxState = { ...newState };\n    auxState.amountBefore = Number.isNaN(auxState.amountBefore) ? '' : auxState.amountBefore;\n    auxState.amount = Number.isNaN(auxState.amount) ? '' : auxState.amount;\n    if (operation === InvestmentOperation.increase) {\n      auxState.amountAfter = Number(auxState.amountBefore) + Number(auxState.amount);\n    } else if (operation === InvestmentOperation.decrease) {\n      auxState.amountAfter = Number(auxState.amountBefore) - Number(auxState.amount);\n    }\n    return auxState;\n  };\n\n  const amountChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate(prevState => {\n      const newState = { ...prevState, amount: $event.target.valueAsNumber };\n      return syncValues(newState);\n    });\n  };\n\n  const ammountBeforeChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    setstate(prevState => {\n      const newState = { ...prevState, amountBefore: $event.target.valueAsNumber };\n      return syncValues(newState);\n    });\n  };\n\n  const dateChangeHandler = (newDate: Date | null) => {\n    if (newDate) {\n      setstate({ ...state, date: newDate });\n    }\n  };\n\n  const newOperationHandler = (event: FormEvent) => {\n    event.preventDefault();\n    const newOperation: IInvestmentOperation = {\n      investmentId: investment.id!,\n      asset: investment.asset,\n      date,\n      amount: Number(amount),\n      amountBefore: Number(amountBefore),\n      amountAfter: Number(amountAfter),\n      operation: operation!,\n    };\n    newInvestmentOperation!(newOperation);\n    setstate(emptyModal);\n    close();\n  };\n\n  let operationLabel = 'ERROR!';\n  if (operation === InvestmentOperation.increase) {\n    operationLabel = 'Deposit';\n  } else if (operation === InvestmentOperation.decrease) {\n    operationLabel = 'Whitdraw';\n  }\n\n  return (\n    <Dialog open={open} onClose={closeHandler}>\n      <form onSubmit={newOperationHandler}>\n        <DialogTitle>New operation</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {operationLabel}\n          </DialogContentText>\n          <DatePicker\n            fullWidth\n            label=\"Date\"\n            value={date}\n            change={dateChangeHandler}\n          />\n          <div className=\"flex-row form-row\">\n            <AdornmentInput\n              type=\"number\"\n              fullWidth\n              label=\"Total before operation\"\n              adornment=\"$\"\n              value={amountBefore}\n              change={ammountBeforeChangeHandler}\n            />\n            <AdornmentInput\n              type=\"number\"\n              fullWidth\n              label=\"Operation amount\"\n              adornment=\"$\"\n              value={amount}\n              change={amountChangeHandler}\n            />\n          </div>\n          <span>\n            Total after operation: $\n            {\n              amountAfter.toLocaleString(\n                undefined,\n                {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                },\n              )\n            }\n          </span>\n\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeHandler} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default NewOperationDialog;\n","import Button from '@material-ui/core/Button';\nimport { ChangeEvent } from 'react';\n\ninterface IFileUpload {\n  /* eslint-disable-next-line */\n  select: (file: Blob) => void;\n}\n\nconst FileUpload = (props: IFileUpload) => {\n  const { select } = props;\n\n  const fileChangeHandler = ($event: ChangeEvent<HTMLInputElement>) => {\n    if ($event.target.files?.length! > 0) {\n      select($event.target.files![0]);\n    }\n  };\n  return (\n    <>\n      <input\n        id=\"button-file\"\n        accept=\"application/JSON\"\n        hidden\n        type=\"file\"\n        onChange={fileChangeHandler}\n      />\n      {/* eslint-disable-next-line */}\n      <label htmlFor=\"button-file\">\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          component=\"span\"\n        >\n          Upload\n        </Button>\n      </label>\n    </>\n  );\n};\n\nexport default FileUpload;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AdornmentInput from 'components/UI/AdornmentInput/AdornmentInput';\nimport DatePicker from 'components/UI/DatePicker/DatePicker';\nimport { FormEvent, ChangeEvent, useState, useContext } from 'react';\nimport { DashboardContext } from 'context/DashboardContext';\nimport FileUpload from 'components/UI/FileUpload/FileUpload';\n\ninterface ILoadDbDialogProps {\n  open: boolean;\n  close: () => void;\n}\n\nconst ImportDbDialog = (props: ILoadDbDialogProps) => {\n  const { importDb } = useContext(DashboardContext);\n  const [file, setfile] = useState<Blob | null>(null);\n\n  const { open, close } = props;\n\n  const fileChangeHandler = (selectedFile: Blob) => {\n    setfile(selectedFile);\n  };\n\n  const loadDbHandler = (event: FormEvent) => {\n    event.preventDefault();\n    if (file) {\n      importDb!(file);\n      close();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\n      <form onSubmit={loadDbHandler}>\n        <DialogTitle>\n          Import Database\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            This operation will replace curent database\n          </DialogContentText>\n          <FileUpload select={fileChangeHandler} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={close} color=\"primary\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" color=\"primary\">\n            Load\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default ImportDbDialog;\n","import React, { useContext } from 'react';\nimport Summary from 'components/Layout/Dashboard/Summary/Summary';\nimport Investments from 'components/Layout/Dashboard/Investments/Investments';\nimport { DashboardContext } from 'context/DashboardContext';\nimport Welcome from 'components/Layout/Dashboard/Welcome/Welcome';\nimport UpdateInvestmentDialog from 'components/Dialogs/UpdateInvestmentDialog';\nimport AddInvestmentDialog from 'components/Dialogs/AddInvestmentDialog';\nimport NewOperationDialog from 'components/Dialogs/NewOperationDialog';\nimport ImportDbDialog from 'components/Dialogs/ImportDbDialog';\nimport { ModalContext } from 'context/ModalContext';\n\nconst Dashboard = () => {\n  const { selectedInvestment, investments, operation } = useContext(DashboardContext);\n  const { dialogsState, openNewDialog, closeOpenDialogs } = useContext(ModalContext);\n\n  const openNewDialogHandler = () => {\n    openNewDialog!();\n  };\n\n  const closeDialogHandler = () => {\n    closeOpenDialogs!();\n  };\n\n  let dashboard = <Welcome openAddDialog={openNewDialogHandler} />;\n\n  if (investments.length > 0) {\n    dashboard = (\n      <>\n        <Summary\n          openAddDialog={openNewDialogHandler}\n          investments={investments}\n        />\n        <Investments investments={investments} />\n      </>\n    );\n  }\n\n  const dialogs = selectedInvestment ? (\n    <>\n      <ImportDbDialog\n        open={dialogsState.loadDbDialogOn}\n        close={closeDialogHandler}\n      />\n      <AddInvestmentDialog\n        open={dialogsState.newDialogOn}\n        close={closeDialogHandler}\n      />\n      <UpdateInvestmentDialog\n        open={dialogsState.updateDialogOn}\n        investment={selectedInvestment!}\n        close={closeDialogHandler}\n      />\n      <NewOperationDialog\n        open={dialogsState.newOperationOn}\n        investment={selectedInvestment!}\n        operation={operation!}\n        close={closeDialogHandler}\n      />\n    </>\n  )\n    : (\n      <>\n        <ImportDbDialog\n          open={dialogsState.loadDbDialogOn}\n          close={closeDialogHandler}\n        />\n        <AddInvestmentDialog open={dialogsState.newDialogOn} close={closeDialogHandler} />\n      </>\n    );\n\n  return (\n    <>\n      {dialogs}\n      <h2>Dashboard</h2>\n      {dashboard}\n    </>\n  );\n};\n\nexport default Dashboard;\n","import { useEffect, useContext } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from 'components/Layout/Toolbar/MyToolbar';\nimport { DashboardContext } from 'context/DashboardContext';\nimport Dashboard from 'components/Layout/Dashboard/Dashboard';\nimport InvestmentsDatabase from 'database/database';\n\nimport styles from './Layout.module.css';\n\nconst Layout = () => {\n  const { loadDataFromDb } = useContext(DashboardContext);\n\n  useEffect(() => {\n    loadDataFromDb!();\n  }, []);\n\n  return (\n    <div className={styles.layout}>\n      <Toolbar />\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <main className={styles.main}>\n          <Container className={styles.scrollContainer} maxWidth=\"md\">\n            <Dashboard />\n          </Container>\n        </main>\n      </MuiPickersUtilsProvider>\n    </div>\n  );\n};\n\nexport default Layout;\n","import Layout from 'components/Layout/Layout';\nimport ModalContextProvider from 'context/ModalContext';\nimport DashboardProvider from 'context/DashboardContext';\n\nconst App = () => (\n  <ModalContextProvider>\n    <DashboardProvider>\n      <Layout />\n    </DashboardProvider>\n  </ModalContextProvider>\n);\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__3PvPc\",\"main\":\"Layout_main__1dFZc\",\"scrollContainer\":\"Layout_scrollContainer__1u1Tu\"};"],"sourceRoot":""}